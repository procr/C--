/* Generated By:JJTree&JavaCC: Do not edit this line. Eg2Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Eg2Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int TO = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int FOREACH = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int STRUCT = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int VARIABLE_TYPE = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int BOOL = 19;
  /** RegularExpression Id. */
  int INT = 20;
  /** RegularExpression Id. */
  int CHAR = 21;
  /** RegularExpression Id. */
  int REAL = 22;
  /** RegularExpression Id. */
  int VOID = 23;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 24;
  /** RegularExpression Id. */
  int REAL_LITERAL = 25;
  /** RegularExpression Id. */
  int LITERAL = 26;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 27;
  /** RegularExpression Id. */
  int DIGIT = 28;
  /** RegularExpression Id. */
  int DIGITS = 29;
  /** RegularExpression Id. */
  int DECIMAL_NUMERAL = 30;
  /** RegularExpression Id. */
  int HEX_DIGIT = 31;
  /** RegularExpression Id. */
  int HEX_NUMERAL = 32;
  /** RegularExpression Id. */
  int OCTAL_DIGIT = 33;
  /** RegularExpression Id. */
  int OCTAL_NUMERAL = 34;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 35;
  /** RegularExpression Id. */
  int NULL_LITERAL = 36;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;
  /** RegularExpression Id. */
  int LETTER = 39;
  /** RegularExpression Id. */
  int ASSIGNMENT_EQUAL_OPERATOR = 40;
  /** RegularExpression Id. */
  int ASSIGNMENT_OPERATOR = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"to\"",
    "\"while\"",
    "\"foreach\"",
    "\"break\"",
    "\"continue\"",
    "\"struct\"",
    "\"return\"",
    "<VARIABLE_TYPE>",
    "\"const\"",
    "\"bool\"",
    "\"int\"",
    "\"char\"",
    "\"real\"",
    "\"void\"",
    "<INTEGER_LITERAL>",
    "<REAL_LITERAL>",
    "<LITERAL>",
    "<NON_ZERO_DIGIT>",
    "<DIGIT>",
    "<DIGITS>",
    "<DECIMAL_NUMERAL>",
    "<HEX_DIGIT>",
    "<HEX_NUMERAL>",
    "<OCTAL_DIGIT>",
    "<OCTAL_NUMERAL>",
    "<BOOLEAN_LITERAL>",
    "\"null\"",
    "<CHARACTER_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "\"=\"",
    "<ASSIGNMENT_OPERATOR>",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"--\"",
    "\"++\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
  };

}
